// criando costantes. primeiro vem o nome e depois do igual a origem.
const html = document.querySelector('html'); 
const focoBt = document.querySelector('.app__card-button--foco');
const curtoBt = document.querySelector('.app__card-button--curto');
const longoBt = document.querySelector('.app__card-button--longo');
const banner = document.querySelector('.app__image');
const titulo = document.querySelector('.app__title');
const botoes = document.querySelectorAll('.app__card-button');
const startPauseBt = document.querySelector('#start-pause');
const iniciarOuPausarBt = document.querySelector('#start-pause span')
const tempoNaTela = document.querySelector('#timer')


let tempoDecorridoEmSegundos = 1500;
let intervaloId = null;

// a primeira é constante do input do botao e a segunda é o caminho da musica.
const musicaFocoInput = document.querySelector('#alternar-musica');
const musica = new Audio('/sons/luna-rise-part-one.mp3');
const audioPlay = new Audio('/sons/play.wav');
const audioPausa = new Audio('/sons/pause.mp3');
const audioTempoFinalizado = new Audio('./sons/beep.mp3')

// para tocar a musica infinitamentem até o final do tempo.
musica.loop =true 

musicaFocoInput.addEventListener('change', () =>{
    // se a musica estiver pausada
    if(musica.paused) { 
    //    apertarei o play para tocar
        musica.play()
        // e se eu quiser parar de tocar, eu aperto o pause.
    } else {
        musica.pause()
    }
})


focoBt.addEventListener('click', () => {
    tempoDecorridoEmSegundos = 1500
    alterarContexto('foco')
focoBt.classList.add('active')


    //    antes da Refatoração.
    // html.setAttribute('data-contexto','foco')
    // focoBt.classList.add('active')
    // banner.setAttribute('src',`/imagens/foco.png`)  
})

curtoBt.addEventListener('click', () =>{
    tempoDecorridoEmSegundos = 300
    alterarContexto('descanso-curto')
curtoBt.classList.add('active')

    //    antes da Refatoração.
    // html.setAttribute('data-contexto', 'descanso-curto')
    // curtoBt.classList.add('active')
    // banner.setAttribute('src',`/imagens/descanso-curto.png`
   
})

longoBt.addEventListener('click', () => {
    tempoDecorridoEmSegundos = 900
    alterarContexto('descanso-longo')
longoBt.classList.add('active')

    //    antes da Refatoração.
    // html.setAttribute('data-contexto', 'descanso-longo')
    // longoBt.classList.add('active')
    // banner.setAttribute('src',`/imagens/descanso-longo.png`)
  
})

// criando uma funcao para atlerar as paginas/contexto e depois refatora o codigo.
function alterarContexto(contexto){
    mostrarTempo()
    botoes.forEach(function (contexto){
    contexto.classList.remove('active')
    })
    html.setAttribute('data-contexto',contexto)
    banner.setAttribute('src',`/imagens/${contexto}.png`)
switch (contexto) {
    case "foco":
        titulo.innerHTML = 
            `Otimize sua produtividade,<br>
            <strong class="app__title-strong">mergulhe no que importa.</strong> `
        
    break;
    case "descanso-curto":
            titulo.innerHTML = 
            `Que tal dar uma respirada?<br>
            <strong class="app__title-strong">Faça uma pausa curta!</strong>`
        
    break;
    case "descanso-longo":
            titulo.innerHTML = 
            `Hora de voltar à superfície.<br>
            <strong class="app__title-strong">Faça uma pausa longa.</strong>`
       
    default:
        break;
    }
}

const contagemRegressiva = () => {
    if (tempoDecorridoEmSegundos <= 0 ){
        audioTempoFinalizado.play()
        alert('Tempo Finalizado!')

    const focoAtivo = html.getAttribute('data-contexto') == 'foco'
    if (focoAtivo) {
        const evento = new CustomEvent ('focoFinalizado')
        document.dispatchEvent(evento)
    }
        zerar()
        return
    }
    tempoDecorridoEmSegundos  -=1
    mostrarTempo ()
    
};


startPauseBt.addEventListener('click', iniciarOuPausar)

function iniciarOuPausar () {
    if(intervaloId){
        audioPausa.play();
        zerar()
        return
    }
    audioPlay.play()
    intervaloId = setInterval(contagemRegressiva, 1000)
    iniciarOuPausarBt.textContent= "Pausar"

}
function zerar () {
    clearInterval(intervaloId)
    iniciarOuPausarBt.textContent= "Começar"
    intervaloId = null
}

function mostrarTempo(){
    const tempo = new Date(tempoDecorridoEmSegundos * 1000)
    const tempoFormatado = tempo.toLocaleTimeString('pt-Br', {minute:'2-digit', second: '2-digit'})
    tempoNaTela.innerHTML = `${tempoFormatado}`
}


mostrarTempo()




// botoes

const btnAdicionarTarefa = document.querySelector('.app__button--add-task');
const btnDeletarTarefa = document.querySelector('.app__form-footer__button--delete');
const btnCancelarTarefa = document.querySelector('.app__form-footer__button--cancel');
const btnRemoverConcluidas = document.querySelector('#btn-remover-concluidas');
const btnRemoverTodasTarefas = document.querySelector('#btn-remover-todas');

const paragrafoTarefaSelecionada = document.querySelector('.app__section-active-task-description');
const formulario = document.querySelector('.app__form-add-task ');
const textArea = document.querySelector('.app__form-textarea');
const listaDeTarefa = document.querySelector('.app__section-task-list');


let tarefas = JSON.parse(localStorage.getItem("tarefas")) || [] ;
let tarefaSelecionada = null
let litarefaSelecionada = null 

function atualizarTarefa () {
    localStorage.setItem('tarefas', JSON.stringify(tarefas))

};

btnAdicionarTarefa.addEventListener('click', () => {
    formulario.classList.toggle('hidden')

});

formulario.addEventListener('submit', (evento) => {
    evento.preventDefault()
    const tarefa = {
        descricao: textArea.value
    };
    if (evento) {
        textArea.value = ""
        formulario.classList.add('hidden')
        alert ('Tarefa salva com sucesso!')
    };

    tarefas.push(tarefa)
    const elementoTarefa = criarElementoTarefa(tarefa)
    listaDeTarefa.append(elementoTarefa)
    atualizarTarefa()
    
});

// Botões do formulário

btnCancelarTarefa.onclick = () => {
    textArea.value = ""
    formulario.classList.add('hidden')

};
btnDeletarTarefa.onclick = () =>{
    textArea.value = ""
};

function criarElementoTarefa (tarefa) {
    const li = document.createElement('li')
    li.classList.add('app__section-task-list-item')

    const svg = document.createElement('svg')
    svg.innerHTML =`<svg class="app__section-task-icon-status" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="12" cy="12" r="12" fill="#FFF"></circle>
     <path d="M9 16.1719L19.5938 5.57812L21 6.98438L9 18.9844L3.42188 13.4062L4.82812 12L9 16.1719Z" fill="#01080E"></path>
</svg>`

    const paragrafo = document.createElement('p')
    paragrafo.textContent = tarefa.descricao
    paragrafo.classList.add('app__section-task-list-item-description')

    const botao = document.createElement('button')
    botao.classList.add('ty')

    botao.onclick = () => {
        const novaDescricao = prompt ('Qual será o nome da tarefa?')
        if(novaDescricao){
        paragrafo.textContent = novaDescricao
        tarefa.descricao = novaDescricao
        atualizarTarefa()
        }else{
            paragrafo.textContent = tarefa.descricao
        }
    };

    const imgBotao = document.createElement('img')
    imgBotao.setAttribute('src', '/imagens/edit.png')
    botao.append(imgBotao)


if (tarefa.completa) {
    li.classList.add('app__section-task-list-item-complete')
    botao.setAttribute('disabled', 'disabled')
} else {
    li.onclick = () => {
       document.querySelectorAll('.app__section-task-list-item-active')
        .forEach(elemento => {
        elemento.classList.remove('app__section-task-list-item-active')
        });
    
        if(tarefaSelecionada == tarefa) {
            paragrafoTarefaSelecionada.textContent = ''
            tarefaSelecionada = null
            litarefaSelecionada = null
            return
        };
        // aqui é para selecionar o valor real.
        tarefaSelecionada = tarefa
        litarefaSelecionada = li
        paragrafoTarefaSelecionada.textContent = tarefa.descricao
    // adiciona a borda branca.
        li.classList.add('app__section-task-list-item-active')    
    }
}
    li.append(svg)
    li.append(paragrafo)
    li.append(botao)

    return li 

};

tarefas.forEach(tarefa => {
    const elementoTarefa = criarElementoTarefa(tarefa)
    listaDeTarefa.append(elementoTarefa)
    
});

document.addEventListener('focoFinalizado', () =>{
    if(tarefaSelecionada && litarefaSelecionada){       
        litarefaSelecionada.classList.remove('app__section-task-list-item-active')
        litarefaSelecionada.classList.add('app__section-task-list-item-complete')
        litarefaSelecionada.querySelector('button').setAttribute('disabled', 'disabled')
        tarefaSelecionada.completa = true
        atualizarTarefa()

    }
});

// botoes dropdown 

const removerTarefas = (somenteCompleta) => {
    let seletor =  ".app__section-task-list-item"
    if (somenteCompleta) {
        seletor = ".app__section-task-list-item-complete"
    }
    document.querySelectorAll(seletor).forEach(elemento => {
        elemento.remove()
        paragrafoTarefaSelecionada.remove()
       
    })
    tarefas = somenteCompleta ? tarefas.filter(tarefa => !tarefa.completa) : []
    atualizarTarefa()
    };

btnRemoverConcluidas.onclick = () => removerTarefas(true)
btnRemoverTodasTarefas.onclick = () => removerTarefas(false)
